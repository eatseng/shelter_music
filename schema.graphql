input AddRoomVideosInput {
  videos: [VideoInput!]
  room: RoomInput
}

type AddRoomVideosMutationPayload {
  error: String
  videos: [Video!]
}

input CreateInviteInput {
  invitees: [UserInput!]
  room: RoomInput!
}

input CreateRoomInput {
  name: String!
}

input EnableVotingInput {
  roomID: String!
  isEnableVoting: Boolean!
}

type EnableVotingMutationPayload {
  error: String
  id: String
  isVotingEnabled: Boolean
}

type Home implements Node {
  id: ID!
  rooms(after: String, first: Int, before: String, last: Int): RoomConnection
}

type Invite {
  id: String!
  creator: User!
  recipient: User!
  room: Room!
  status: String!
}

type InviteConnection {
  edges: [InviteEdge!]
  pageINfo: PageInfo
}

type InviteEdge {
  cursor: String!
  node: Invite
}

type InviteMutationPayload {
  error: String
}

input LeaveRoomInput {
  roomID: String!
}

type LeaveRoomMutationPayload {
  isLeft: Boolean
}

type Mutation {
  addRoomVideos(input: AddRoomVideosInput!): AddRoomVideosMutationPayload
  createInvite(input: CreateInviteInput!): InviteMutationPayload
  createRoom(input: CreateRoomInput!): RoomMutationPayload
  enableVoting(input: EnableVotingInput): EnableVotingMutationPayload
  leaveRoom(input: LeaveRoomInput): LeaveRoomMutationPayload
  updateRoomVideo(input: UpdateRoomVideoInput!): UpdateRoomVideoMutationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  home: Home
  room(id: String!): Room
  user: User
  users: [User!]
}

type Room {
  creator: User
  id: String
  isVotingEnabled: Boolean
  name: String!
  onlineParticipants(after: String, first: Int, before: String, last: Int): UserConnection
  videos(after: String, first: Int, before: String, last: Int): VideoConnection
}

type RoomConnection {
  edges: [RoomEdge]
  pageInfo: PageInfo
}

type RoomEdge {
  cursor: String!
  node: Room
}

input RoomInput {
  creator: UserInput!
  id: String!
  name: String!
}

type RoomInvites {
  accepted: InviteConnection
  pending: InviteConnection
  rejected: InviteConnection
}

type RoomMutationPayload {
  error: String
  room: Room
}

input UpdateRoomVideoInput {
  video: VideoInput!
  vote: VoteInput
  room: RoomInput
}

type UpdateRoomVideoMutationPayload {
  error: String
  video: Video
  vote: VideoVote
}

type User {
  givenName: String!
  id: String!
  name: String!
  onlineTimestamp: Int
  picture: String!
  roomInvites: RoomInvites
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo
}

type UserEdge {
  cursor: String!
  node: User
}

input UserInput {
  givenName: String!
  id: String
  name: String
  picture: String!
}

type Video {
  addedBy: User!
  description: String
  id: String!
  playAt: Int
  publishedAt: String
  thumbnails: VideoThumbnails!
  title: String!
  videoID: String!
  votes(after: String, first: Int, before: String, last: Int): VideoVoteConnection
}

type VideoConnection {
  edges: [VideoEdge]
  pageInfo: PageInfo
}

type VideoEdge {
  cursor: String!
  node: Video
}

input VideoInput {
  description: String
  id: String
  isVideoPlaying: Boolean
  isVoted: Boolean
  publishedAt: String
  thumbnails: VideoThumbnailsInput!
  title: String!
  videoID: String!
}

type VideoThumbnail {
  height: Int!
  width: Int!
  url: String!
}

input VideoThumbnailInput {
  height: Int!
  width: Int!
  url: String!
}

type VideoThumbnails {
  default: VideoThumbnail
  medium: VideoThumbnail
  high: VideoThumbnail
}

input VideoThumbnailsInput {
  default: VideoThumbnailInput
  medium: VideoThumbnailInput
  high: VideoThumbnailInput
}

type VideoVote {
  id: String!
  userID: String!
}

type VideoVoteConnection {
  edges: [VideoVoteEdge]
  pageInfo: PageInfo
}

type VideoVoteEdge {
  cursor: String!
  node: VideoVote
}

input VoteInput {
  id: String
  userID: String
}

